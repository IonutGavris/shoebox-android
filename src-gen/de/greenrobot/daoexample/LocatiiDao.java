package de.greenrobot.daoexample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import de.greenrobot.daoexample.Locatii;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOCATII.
*/
public class LocatiiDao extends AbstractDao<Locatii, Long> {

    public static final String TABLENAME = "LOCATII";

    /**
     * Properties of entity Locatii.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Oras = new Property(1, String.class, "oras", false, "ORAS");
        public final static Property Adresa = new Property(2, String.class, "adresa", false, "ADRESA");
        public final static Property Latitudine = new Property(3, String.class, "latitudine", false, "LATITUDINE");
        public final static Property Longitudine = new Property(4, String.class, "longitudine", false, "LONGITUDINE");
        public final static Property DetaliiAdresa = new Property(5, String.class, "detaliiAdresa", false, "DETALII_ADRESA");
        public final static Property PersoanaContact1 = new Property(6, String.class, "persoanaContact1", false, "PERSOANA_CONTACT1");
        public final static Property NrTelefonPersoanaContact1 = new Property(7, String.class, "nrTelefonPersoanaContact1", false, "NR_TELEFON_PERSOANA_CONTACT1");
        public final static Property PersoanaContact2 = new Property(8, String.class, "persoanaContact2", false, "PERSOANA_CONTACT2");
        public final static Property NrTelefonPersoanaContact2 = new Property(9, String.class, "nrTelefonPersoanaContact2", false, "NR_TELEFON_PERSOANA_CONTACT2");
        public final static Property Orar = new Property(10, String.class, "orar", false, "ORAR");
    };


    public LocatiiDao(DaoConfig config) {
        super(config);
    }
    
    public LocatiiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCATII' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ORAS' TEXT NOT NULL ," + // 1: oras
                "'ADRESA' TEXT," + // 2: adresa
                "'LATITUDINE' TEXT," + // 3: latitudine
                "'LONGITUDINE' TEXT," + // 4: longitudine
                "'DETALII_ADRESA' TEXT," + // 5: detaliiAdresa
                "'PERSOANA_CONTACT1' TEXT," + // 6: persoanaContact1
                "'NR_TELEFON_PERSOANA_CONTACT1' TEXT," + // 7: nrTelefonPersoanaContact1
                "'PERSOANA_CONTACT2' TEXT," + // 8: persoanaContact2
                "'NR_TELEFON_PERSOANA_CONTACT2' TEXT," + // 9: nrTelefonPersoanaContact2
                "'ORAR' TEXT);"); // 10: orar
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCATII'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Locatii entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOras());
 
        String adresa = entity.getAdresa();
        if (adresa != null) {
            stmt.bindString(3, adresa);
        }
 
        String latitudine = entity.getLatitudine();
        if (latitudine != null) {
            stmt.bindString(4, latitudine);
        }
 
        String longitudine = entity.getLongitudine();
        if (longitudine != null) {
            stmt.bindString(5, longitudine);
        }
 
        String detaliiAdresa = entity.getDetaliiAdresa();
        if (detaliiAdresa != null) {
            stmt.bindString(6, detaliiAdresa);
        }
 
        String persoanaContact1 = entity.getPersoanaContact1();
        if (persoanaContact1 != null) {
            stmt.bindString(7, persoanaContact1);
        }
 
        String nrTelefonPersoanaContact1 = entity.getNrTelefonPersoanaContact1();
        if (nrTelefonPersoanaContact1 != null) {
            stmt.bindString(8, nrTelefonPersoanaContact1);
        }
 
        String persoanaContact2 = entity.getPersoanaContact2();
        if (persoanaContact2 != null) {
            stmt.bindString(9, persoanaContact2);
        }
 
        String nrTelefonPersoanaContact2 = entity.getNrTelefonPersoanaContact2();
        if (nrTelefonPersoanaContact2 != null) {
            stmt.bindString(10, nrTelefonPersoanaContact2);
        }
 
        String orar = entity.getOrar();
        if (orar != null) {
            stmt.bindString(11, orar);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Locatii readEntity(Cursor cursor, int offset) {
        Locatii entity = new Locatii( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // oras
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // adresa
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // latitudine
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // longitudine
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // detaliiAdresa
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // persoanaContact1
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nrTelefonPersoanaContact1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // persoanaContact2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // nrTelefonPersoanaContact2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // orar
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Locatii entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOras(cursor.getString(offset + 1));
        entity.setAdresa(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLatitudine(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLongitudine(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDetaliiAdresa(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPersoanaContact1(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNrTelefonPersoanaContact1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPersoanaContact2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNrTelefonPersoanaContact2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOrar(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Locatii entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Locatii entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
